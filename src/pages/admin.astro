---
import "../style/markdown.css";
---

<html lang="en" transition:animate="none">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Admin</title>
  </head>
  <body>
    <div class="editor">
      <div class="form">
        <input id="input" class="title" placeholder="제목을 입력해주세요" />
        <input class="slug" placeholder="영문 제목을 입력해주세요." />
        <div class="tag-wrapper">
          <input
            id="tagp-input"
            class="input"
            placeholder="태그를 입력해주세요"
          />
        </div>

        <textarea id="textarea" placeholder="이제 이야기를 시작하세요"
        ></textarea>

        <div class="button-nav">
          <div class="btn-previous">
            <img src="/icon-arrow-back-dark.svg" alt="left icon" />
            <span>나가기</span>
          </div>
          <div class="btn-wrapper">
            <div class="btn-sub">임시 저장</div>
            <div class="btn-primary">업로드</div>
          </div>
        </div>
      </div>

      <div class="preview">
        <h1 id="title"></h1>
        <div id="result"></div>
      </div>
    </div>
    <script>
      import uploadPost from "../service/uploadPost";
      import uploadImage from "../service/uploadImage";
      //
      import slugify from "../utils/slugify";
      import { markedWriteContent } from "../utils/marked";
      import { prefetch } from "astro:prefetch";

      const textareaElement = document.getElementById(
        "textarea",
      ) as HTMLTextAreaElement;

      const inputElement = document.getElementById(
        "input",
      ) as HTMLTextAreaElement;

      const resultElement = document.getElementById("result") as HTMLDivElement;

      const titleElement = document.getElementById("title") as HTMLDivElement;

      const tagInputElement = document.getElementById(
        "tagp-input",
      ) as HTMLInputElement;

      const tagWrapperElement = document.querySelector(
        ".tag-wrapper",
      ) as HTMLDivElement;

      const slugElement = document.querySelector(".slug") as HTMLInputElement;

      let tagList = [] as string[];

      // 로컬 스토리지에서 값을 로드하고 초기화
      async function loadSavedValues() {
        const savedTitle = localStorage.getItem("draftTitle");
        const savedContent = localStorage.getItem("draftContent");
        const savedTags = localStorage.getItem("draftTags");

        if (savedTitle) {
          titleElement.innerHTML = savedTitle;
        }
        if (savedContent) {
          await markedWriteContent(savedContent, resultElement);
        }
        if (savedTags) {
          tagList = JSON.parse(savedTags);
          tagList.forEach((tag) => addTagToDOM(tag));
        }
      }

      // 태그를 DOM에 추가하고 로컬 스토리지에 저장
      function addTagToDOM(tag: string) {
        const tagElement = document.createElement("div");
        tagElement.classList.add("tag");
        tagElement.textContent = tag;

        const deleteIcon = document.createElement("img");
        deleteIcon.src = "/icon-x-mono.svg";
        deleteIcon.alt = "delete icon";
        deleteIcon.addEventListener("click", () => removeTag(tag));

        tagElement.appendChild(deleteIcon);
        tagWrapperElement.insertBefore(tagElement, tagInputElement);
      }

      // 태그를 리스트와 로컬 스토리지에서 제거
      function removeTag(tag: string) {
        // 모든 태그 요소를 가져옴
        const tagElements = tagWrapperElement.querySelectorAll(".tag");

        // 각 태그 요소를 순회하며 텍스트 내용이 일치하는 요소를 찾음
        tagElements.forEach((tagElement) => {
          if (tagElement.textContent?.trim() === tag) {
            tagElement.remove(); // 일치하는 태그 요소를 제거
          }
        });

        // 태그 리스트에서 해당 태그를 제거
        tagList = tagList.filter((t) => t !== tag);

        // 로컬 스토리지에 변경된 태그 리스트를 저장
        localStorage.setItem("draftTags", JSON.stringify(tagList));
      }

      // 태그 입력 필드에서 태그를 추가
      function handleTagInput(event: KeyboardEvent) {
        if (event.key === "Enter" && tagInputElement.value.trim() !== "") {
          const newTag = tagInputElement.value.trim();

          if (!tagList.includes(newTag)) {
            tagList.push(newTag);
            addTagToDOM(newTag);
            tagInputElement.value = "";
            localStorage.setItem("draftTags", JSON.stringify(tagList));
          } else {
            alert("이미 존재하는 태그입니다!");
          }
        }
      }

      function validateInputs(
        title: string,
        content: string,
        tags: string[],
        slug: string,
      ) {
        if (!title.trim()) {
          alert("아직 제목을 작성하지 않았어요!");
          return false;
        }
        if (!content.trim()) {
          alert("아직 내용을 작성하지 않았어요!");
          return false;
        }
        if (!tags || tags.length === 0) {
          alert("아직 태그가 없어요!");
          return false;
        }
        if (!slug.trim()) {
          alert("아직 영문 타이틀을 작성하지 않았어요!");
          return false;
        }
        if (/[\u3130-\uD79D]|[^a-zA-Z\s-]/.test(slug)) {
          alert("영문 타이틀은 영문자, 공백, 하이픈만 가능해요!");
          return false;
        }

        return true;
      }

      // '업로드' 버튼 클릭 시 처리
      function handleUploadClick() {
        const title = inputElement.value;
        const content = textareaElement.value;
        const tags = tagList;
        const slug = slugify(slugElement.value);

        // 유효성 검사 호출
        if (!validateInputs(title, content, tags, slug)) {
          return;
        }

        if (confirm("이 내용으로 업로드 하시겠어요?")) {
          uploadPost(title, content, tags, slug).then((result) => {
            if (result.success) {
              clearInputs();
              prefetch(`/blog/${slug}`, { ignoreSlowConnection: true });
              window.location.href = `/blog/${slug}`;
            } else {
              alert(
                "포스트 업로드 중 오류가 발생했습니다. 다시 시도해 주세요.",
              );
            }
          });
        }
      }

      function handleSubClick() {
        saveDraft();
        alert("임시 저장 되었어요!");
      }

      // '나가기' 버튼 클릭 시 처리
      function handlePreviousClick() {
        if (confirm("작성 중인 내용이 있습니다. 임시 저장하고 나가시겠어요?")) {
          saveDraft();
          window.location.href = "/";
        } else {
          clearInputs();
          window.location.href = "/";
        }
      }

      // 임시 저장
      function saveDraft() {
        localStorage.setItem("draftTitle", inputElement.value);
        localStorage.setItem("draftSlug", slugElement.value);
        localStorage.setItem("draftContent", textareaElement.value);
        localStorage.setItem("draftTags", JSON.stringify(tagList));
      }

      // 입력 필드와 태그를 초기화
      function clearInputs() {
        inputElement.value = "";
        slugElement.value = "";
        textareaElement.value = "";
        titleElement.innerHTML = "";
        resultElement.innerHTML = "";
        tagList = [];
        while (tagWrapperElement.firstChild) {
          tagWrapperElement.removeChild(tagWrapperElement.firstChild);
        }
        localStorage.removeItem("draftTitle");
        localStorage.removeItem("draftTags");
        localStorage.removeItem("draftSlug");
        localStorage.removeItem("draftContent");
      }

      // 이미지 드롭 이벤트 처리
      async function handleDrop(event: DragEvent) {
        event.preventDefault();
        const files = event.dataTransfer?.files;

        if (!files || files.length === 0) return;

        const file = files[0];
        const imageUrl = await uploadImage(file);

        if (imageUrl) {
          insertImageToMarkdown(imageUrl);
        }
      }

      // 마크다운에 이미지 삽입
      function insertImageToMarkdown(url: string) {
        const textarea = document.getElementById(
          "textarea",
        ) as HTMLTextAreaElement | null;

        if (textarea) {
          const markdownImage = `![](${url})\n`;
          const cursorPos = textarea.selectionStart ?? 0;
          const textBefore = textarea.value.substring(0, cursorPos);
          const textAfter = textarea.value.substring(cursorPos);

          console.log("Inserting image URL:", url);
          console.log("Current Textarea Value:", textarea.value);
          console.log("Text Before:", textBefore);
          console.log("Text After:", textAfter);

          textarea.value = textBefore + markdownImage + textAfter;
          textarea.selectionStart = textarea.selectionEnd =
            cursorPos + markdownImage.length;
          textarea.focus();

          console.log("Updated Textarea Value:", textarea.value);
        } else {
          console.error("Textarea element not found");
        }
      }

      // 초기화 및 이벤트 리스너 등록
      loadSavedValues();
      if (tagInputElement) {
        tagInputElement.addEventListener("keyup", handleTagInput);
      }

      if (inputElement) {
        inputElement.addEventListener(
          "keyup",
          async () => (titleElement.innerHTML = inputElement.value),
        );
      }
      if (textareaElement) {
        textareaElement.addEventListener(
          "keyup",
          async () =>
            await markedWriteContent(textareaElement.value, resultElement),
        );
      }

      const clickUpload = document.querySelector(
        ".btn-primary",
      ) as HTMLButtonElement;
      clickUpload.onclick = handleUploadClick;

      const btnPrevious = document.querySelector(
        ".btn-previous",
      ) as HTMLButtonElement;
      btnPrevious.addEventListener("click", handlePreviousClick);

      const btnSub = document.querySelector(".btn-sub") as HTMLButtonElement;
      btnSub.addEventListener("click", handleSubClick);

      // 드롭 이벤트 리스너 등록
      textareaElement.addEventListener("drop", handleDrop);
      textareaElement.addEventListener("dragover", (event) =>
        event.preventDefault(),
      );
    </script>
  </body>
</html>
